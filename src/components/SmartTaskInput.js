import React, { useState, useRef, useEffect } from 'react';
import { FiPlus, FiZap, FiCalendar, FiUser, FiTag, FiClock, FiTarget } from 'react-icons/fi';
import { RiSparklingFill } from 'react-icons/ri';

const SmartTaskInput = ({ onAddTask, projectId }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [input, setInput] = useState('');
  const [aiSuggestions, setAiSuggestions] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [parsedTask, setParsedTask] = useState(null);
  const [showAIFeatures, setShowAIFeatures] = useState(false);
  const inputRef = useRef(null);

  const aiFeatures = [
    { 
      id: 'smart-parse', 
      icon: <RiSparklingFill />, 
      title: 'Smart Parse', 
      description: 'AI understands natural language like "Call Sarah tomorrow at 3pm"',
      example: 'Try: "Plan team meeting next Friday morning"'
    },
    { 
      id: 'task-breakdown', 
      icon: <FiTarget />, 
      title: 'Task Breakdown', 
      description: 'Break complex tasks into actionable steps',
      example: 'Try: "Organize company retreat"'
    },
    { 
      id: 'smart-scheduling', 
      icon: <FiCalendar />, 
      title: 'Smart Scheduling', 
      description: 'AI suggests optimal timing and preparation',
      example: 'Try: "Prepare presentation for board meeting"'
    },
    { 
      id: 'contextual-suggestions', 
      icon: <FiZap />, 
      title: 'Smart Suggestions', 
      description: 'Get relevant next steps and resources',
      example: 'Try: "Write blog post about AI"'
    }
  ];\n\n  useEffect(() => {\n    if (isExpanded && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isExpanded]);\n\n  const handleInputChange = async (e) => {\n    const value = e.target.value;\n    setInput(value);\n    \n    // Trigger AI processing for inputs longer than 10 characters\n    if (value.length > 10 && !isProcessing) {\n      debounceAIProcess(value);\n    }\n  };\n\n  const debounceAIProcess = debounce(async (text) => {\n    await processWithAI(text, 'smart-parse');\n  }, 800);\n\n  const processWithAI = async (text, feature = 'smart-parse', context = {}) => {\n    if (!text.trim()) return;\n    \n    setIsProcessing(true);\n    \n    try {\n      const response = await fetch('/api/ai-task-processor', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userInput: text,\n          feature,\n          context: {\n            projectId,\n            ...context\n          }\n        })\n      });\n      \n      if (response.ok) {\n        const result = await response.json();\n        \n        if (feature === 'smart-parse' && result.parsed) {\n          setParsedTask(result.parsed);\n        } else {\n          setAiSuggestions(result);\n        }\n      }\n    } catch (error) {\n      console.error('AI processing error:', error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!input.trim()) return;\n    \n    let taskData = {\n      task: input,\n      projectId: projectId || '1',\n      date: '',\n      priority: 'medium'\n    };\n    \n    // Use AI-parsed data if available\n    if (parsedTask) {\n      taskData = {\n        task: parsedTask.taskName || input,\n        projectId: projectId || '1',\n        date: parsedTask.date || '',\n        priority: parsedTask.priority || 'medium',\n        aiEnhanced: true,\n        metadata: {\n          originalInput: input,\n          aiParsed: parsedTask,\n          confidence: parsedTask.confidence\n        }\n      };\n    }\n    \n    onAddTask(taskData);\n    \n    // Reset form\n    setInput('');\n    setParsedTask(null);\n    setAiSuggestions(null);\n    setIsExpanded(false);\n  };\n\n  const handleAIFeatureClick = async (feature) => {\n    if (!input.trim()) {\n      // Show example\n      const selectedFeature = aiFeatures.find(f => f.id === feature.id);\n      if (selectedFeature) {\n        setInput(selectedFeature.example.replace('Try: ', ''));\n      }\n      return;\n    }\n    \n    await processWithAI(input, feature.id);\n  };\n\n  const ApplyParsedTask = () => {\n    if (!parsedTask) return null;\n    \n    return (\n      <div className=\"ai-parsed-preview\">\n        <div className=\"ai-parsed-header\">\n          <RiSparklingFill className=\"ai-icon\" />\n          <span>AI Enhanced Task</span>\n          <span className=\"confidence\">Confidence: {Math.round(parsedTask.confidence * 100)}%</span>\n        </div>\n        \n        <div className=\"parsed-details\">\n          <div className=\"detail-item\">\n            <FiTarget className=\"detail-icon\" />\n            <span className=\"detail-label\">Task:</span>\n            <span className=\"detail-value\">{parsedTask.taskName}</span>\n          </div>\n          \n          {parsedTask.date && (\n            <div className=\"detail-item\">\n              <FiCalendar className=\"detail-icon\" />\n              <span className=\"detail-label\">Date:</span>\n              <span className=\"detail-value\">{parsedTask.date}</span>\n            </div>\n          )}\n          \n          {parsedTask.time && (\n            <div className=\"detail-item\">\n              <FiClock className=\"detail-icon\" />\n              <span className=\"detail-label\">Time:</span>\n              <span className=\"detail-value\">{parsedTask.time}</span>\n            </div>\n          )}\n          \n          <div className=\"detail-item\">\n            <FiTag className=\"detail-icon\" />\n            <span className=\"detail-label\">Priority:</span>\n            <span className={`priority-badge ${parsedTask.priority}`}>{parsedTask.priority}</span>\n          </div>\n          \n          {parsedTask.people && parsedTask.people.length > 0 && (\n            <div className=\"detail-item\">\n              <FiUser className=\"detail-icon\" />\n              <span className=\"detail-label\">People:</span>\n              <span className=\"detail-value\">{parsedTask.people.join(', ')}</span>\n            </div>\n          )}\n          \n          {parsedTask.category && (\n            <div className=\"detail-item\">\n              <FiTag className=\"detail-icon\" />\n              <span className=\"detail-label\">Category:</span>\n              <span className=\"detail-value\">{parsedTask.category}</span>\n            </div>\n          )}\n        </div>\n        \n        {parsedTask.suggestions && parsedTask.suggestions.length > 0 && (\n          <div className=\"ai-suggestions\">\n            <h4>AI Suggestions:</h4>\n            <ul>\n              {parsedTask.suggestions.map((suggestion, index) => (\n                <li key={index}>{suggestion}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const AIFeatureButtons = () => (\n    <div className=\"ai-features\">\n      <div className=\"ai-features-header\">\n        <RiSparklingFill className=\"ai-icon\" />\n        <span>AI Features</span>\n      </div>\n      \n      <div className=\"ai-features-grid\">\n        {aiFeatures.map((feature) => (\n          <button\n            key={feature.id}\n            className=\"ai-feature-btn\"\n            onClick={() => handleAIFeatureClick(feature)}\n            disabled={isProcessing}\n          >\n            <div className=\"feature-icon\">{feature.icon}</div>\n            <div className=\"feature-content\">\n              <div className=\"feature-title\">{feature.title}</div>\n              <div className=\"feature-description\">{feature.description}</div>\n            </div>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n\n  if (!isExpanded) {\n    return (\n      <div className=\"smart-task-input-collapsed\">\n        <button \n          className=\"expand-button\"\n          onClick={() => setIsExpanded(true)}\n        >\n          <FiPlus className=\"plus-icon\" />\n          <span>Add task with AI assistance</span>\n          <RiSparklingFill className=\"ai-badge\" />\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"smart-task-input-expanded\">\n      <form onSubmit={handleSubmit} className=\"task-form\">\n        <div className=\"input-container\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={input}\n            onChange={handleInputChange}\n            placeholder=\"Type naturally: 'Call Sarah tomorrow at 3pm' or 'Plan team retreat'\"\n            className=\"smart-input\"\n          />\n          \n          <div className=\"input-actions\">\n            <button\n              type=\"button\"\n              className=\"ai-toggle\"\n              onClick={() => setShowAIFeatures(!showAIFeatures)}\n              title=\"Toggle AI Features\"\n            >\n              <RiSparklingFill className={`ai-icon ${isProcessing ? 'processing' : ''}`} />\n            </button>\n            \n            <button\n              type=\"submit\"\n              className=\"submit-btn\"\n              disabled={!input.trim() || isProcessing}\n            >\n              Add Task\n            </button>\n            \n            <button\n              type=\"button\"\n              className=\"cancel-btn\"\n              onClick={() => {\n                setIsExpanded(false);\n                setInput('');\n                setParsedTask(null);\n                setAiSuggestions(null);\n                setShowAIFeatures(false);\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n        \n        {isProcessing && (\n          <div className=\"ai-processing\">\n            <RiSparklingFill className=\"processing-icon\" />\n            <span>AI is analyzing your task...</span>\n          </div>\n        )}\n        \n        <ApplyParsedTask />\n        \n        {showAIFeatures && <AIFeatureButtons />}\n        \n        {aiSuggestions && (\n          <div className=\"ai-suggestions-panel\">\n            <h4>AI Suggestions</h4>\n            <pre>{JSON.stringify(aiSuggestions, null, 2)}</pre>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\n// Utility function for debouncing\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\nexport default SmartTaskInput;